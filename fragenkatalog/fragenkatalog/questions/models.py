import re

from django.db import models
from django.db.transaction import atomic

from fragenkatalog.quizzes.models import Quiz


class Question(models.Model):
    # mandatory fields
    description = models.CharField(max_length=10000)
    quiz = models.ForeignKey(Quiz, on_delete=models.CASCADE)

    # autogenerated fields
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    # optional fields
    image = models.ImageField(upload_to="images", null=True, blank=True)


class TextualQuestion(Question):
    # mandatory fields
    solution = models.CharField(max_length=10000)


class MultipleChoiceQuestion(Question):
    @staticmethod
    def create(description, quiz, solution, image):
        correct_answers = list()
        incorrect_answers = list()
        for line in solution.strip().splitlines():
            if line.strip().startswith("- [ ]"):
                incorrect_answers.append(line.replace("- [ ]", "").strip())
                continue
            if line.strip().startswith("- [x]"):
                correct_answers.append(line.replace("- [x]", "").strip())
                continue
            raise ValueError()
        with atomic():
            question = MultipleChoiceQuestion.objects.create(
                description=description, quiz=quiz, image=image
            )
            for answer in correct_answers:
                MultipleChoiceOption.objects.create(
                    question=question, is_solution=True, option_description=answer
                )
            for answer in incorrect_answers:
                MultipleChoiceOption.objects.create(
                    question=question, is_solution=False, option_description=answer
                )
        return question


class MultipleChoiceOption(models.Model):
    # mandatory fields
    question = models.ForeignKey(MultipleChoiceQuestion, on_delete=models.CASCADE)
    is_solution = models.BooleanField(default=False)
    option_description = models.CharField(max_length=10000)
